name: Docker Image CI/CD - Release - Afdian.Server

on:
#  release:
#    types: [published]
  push:
    tags:
      - 'Afdian.Server-v*'

jobs:
  # build and push
  build: 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set outputs
        id: vars
        run: |
          #echo ::set-output name=RELEASE_VERSION::$(echo ${GITHUB_REF:10})
          # 去掉前面的 refs/tags/Afdian.Server-
          echo ::set-output name=RELEASE_VERSION::$(echo ${GITHUB_REF:24})
          echo ::set-output name=IMAGE_NAME::afdian-server

      - name: Build Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ steps.vars.outputs.IMAGE_NAME }}:${{ steps.vars.outputs.RELEASE_VERSION }} -f src/Afdian.Server/Dockerfile .

      - name: Login to Registry - Docker Hub
        run: docker login --username=${{ secrets.DOCKER_USERNAME }} --password ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Image - Docker Hub
        # push: RELEASE_VERSION, latest
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ steps.vars.outputs.IMAGE_NAME }}:${{ steps.vars.outputs.RELEASE_VERSION }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ steps.vars.outputs.IMAGE_NAME }}:${{ steps.vars.outputs.RELEASE_VERSION }} ${{ secrets.DOCKER_USERNAME }}/${{ steps.vars.outputs.IMAGE_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ steps.vars.outputs.IMAGE_NAME }}:latest
      
      - name: Login to Registry - ghcr.io
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      
      - name: Push Image - ghcr.io
        # push: RELEASE_VERSION, latest
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/${{ steps.vars.outputs.IMAGE_NAME }}
          VERSION=${{ steps.vars.outputs.RELEASE_VERSION }}
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ steps.vars.outputs.IMAGE_NAME }}:latest $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          docker tag $IMAGE_ID:$VERSION $IMAGE_ID:latest
          docker push $IMAGE_ID:latest


  # Docker 自动部署
  deploy-docker: 
    needs: [build]
    name: Deploy Docker
    runs-on: ubuntu-latest
    steps:
      - name: Set outputs
        id: vars
        run: |
          #echo ::set-output name=RELEASE_VERSION::$(echo ${GITHUB_REF:10})
          # 去掉前面的 refs/tags/Afdian.Server-
          echo ::set-output name=RELEASE_VERSION::$(echo ${GITHUB_REF:24})
          echo ::set-output name=IMAGE_NAME::afdian-server

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }} # 服务器ip
          username: ${{ secrets.HOST_USERNAME }} # 服务器登录用户名
          password: ${{ secrets.HOST_PASSWORD }} # 服务器登录密码
          port: ${{ secrets.HOST_PORT }} # 服务器ssh端口
          command_timeout: 360m
          script: |
            # 切换工作区
            cd /www/wwwroot/afdian.moeci.com
            # 下载 docker-compose.yml
            wget -O docker-compose.yml https://gitee.com/yiyungent/Afdian.Sdk/raw/main/docker-compose.yml
            # 停止并删除旧 容器、网络、挂载点
            #docker-compose down                          # TODO: docker-compose: command not found. 不知道为什么找不到 docker-compose，但直接连接服务器执行就可以
            /usr/local/python3/bin/docker-compose down
            # 删除旧镜像
            docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ steps.vars.outputs.IMAGE_NAME }}
            # 登录镜像服务器
            docker login --username=${{ secrets.DOCKER_USERNAME }} --password ${{ secrets.DOCKER_PASSWORD }} 
            # 创建并启动容器
            #docker-compose up -d --build
            /usr/local/python3/bin/docker-compose up -d --build